{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def alllc(p):\n",
    "    R.<t> = GF(p)[]\n",
    "    If2 = [p for p in R.polynomials(2) if p.is_irreducible()]\n",
    "    Ig3 = [p for p in R.polynomials(3) if p.is_irreducible()]\n",
    "    Ic1 = [p for p in R.polynomials(1) if p.is_irreducible()]\n",
    "    \n",
    "    #declaring the following variables outside of the loops is for proper accessibility\n",
    "    \n",
    "    count = 0\n",
    "    yy = [] #to contain all c in it\n",
    "    yy2 = [] #to contain all c^3 + fc+ g so we can factor the elements of this later\n",
    "    f = 0\n",
    "    g = 0\n",
    "    mfive = 0 #counts if the frequency of c's is more than 5\n",
    "    \n",
    "    for k in range(len(If2)): #loops through all irreducible f\n",
    "        f = If2[k] \n",
    "        \n",
    "        for l in range(len(Ig3)): #loops through all irreducible g, for a given f\n",
    "            g = Ig3[l]\n",
    "            #print g\n",
    "            \n",
    "            lista = [] #to contain the a's, these are not necessarily printed\n",
    "            listc = [] #to contain the c's that satisfy a|3f + c^2 and we are interested in the length of this guy\n",
    "            yy = [c for c in Ic1 if discriminant (c**3 + f*c + g) == 0]\n",
    "            #print (\"No. of cs for repeated roots is\", len(yy))\n",
    "\n",
    "            yy2 = [c^3 + f*c + g for c in yy]\n",
    "            \n",
    "            for i in range(len(yy)): #looping through all c such that disc is 0\n",
    "                if (yy2[i] in ZZ): #to check if it is an integer, integers have disc 0?\n",
    "                    break\n",
    "                sqwith = yy2[i].factor()\n",
    "                \n",
    "                L = list(sqwith) #stores the factors of sqwith in a list\n",
    "                #print ((yy[i]),'         ', sqwith, '       ', L)\n",
    "                check = 3*f + yy[i]*yy[i]\n",
    "                if (check.mod(L[0][0]) == 0):\n",
    "                    \n",
    "                    lista.append(L[0][0])\n",
    "                    listc.append(yy[i])\n",
    "                    count += 1\n",
    "                    \n",
    "            if(len(listc) > 0):\n",
    "                print len(listc),\n",
    "                \n",
    "            \n",
    "    print \"\\n\", \"Total number of all c: \", count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#This is the same experiment above except it only works for a random f & g and outputs the c's, a's & d's for purposes\n",
    "\n",
    "import random\n",
    "import sage.all\n",
    "def allc(p):\n",
    "    R.<t> = GF(p)[]\n",
    "    If2 = [p for p in R.polynomials(2) if discriminant(p) == 0]\n",
    "    Ig3 = [p for p in R.polynomials(3) if p.is_irreducible()]\n",
    "    Ic1 = [p for p in R.polynomials(1) if p.is_irreducible()]\n",
    "    f = random.choice(If2)\n",
    "    g = random.choice(Ig3)\n",
    "    print f\n",
    "    print g\n",
    "    \n",
    "    #print len(If2)\n",
    "    #print len(Ig3)\n",
    "    #print len(Ic1)\n",
    "    \n",
    "    lista = []\n",
    "    listc = []\n",
    "    yy = [c for c in Ic1 if discriminant (c**3 + f*c + g) == 0]\n",
    "    yy2 = [c^3 + f*c + g for c in Ic1 if discriminant (c**3 + f*c + g) == 0]\n",
    "    \n",
    "    for i in range(len(yy)):\n",
    "        if (yy2[i] in ZZ): #to check if it is an integer, integers have disc 0?\n",
    "                    break\n",
    "        sqwith = yy2[i].factor()\n",
    "        L = list(sqwith)\n",
    "        print ((yy2[i]),'         ', yy[i], '       ', sqwith, '       ', L)\n",
    "        check = 3*f + yy[i]*yy[i]\n",
    "        if (check.mod(L[0][0]) == 0):\n",
    "            lista.append(L[0][0])\n",
    "            listc.append(yy[i])\n",
    "            print true\n",
    "    print len(yy)\n",
    "    print len(listc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "SageMath 8.8",
   "language": "sage",
   "name": "sagemath"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.15"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
